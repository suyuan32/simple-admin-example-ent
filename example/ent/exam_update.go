// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-example-api/ent/course"
	"github.com/suyuan32/simple-admin-example-api/ent/exam"
	"github.com/suyuan32/simple-admin-example-api/ent/predicate"
	"github.com/suyuan32/simple-admin-example-api/ent/student"
)

// ExamUpdate is the builder for updating Exam entities.
type ExamUpdate struct {
	config
	hooks    []Hook
	mutation *ExamMutation
}

// Where appends a list predicates to the ExamUpdate builder.
func (eu *ExamUpdate) Where(ps ...predicate.Exam) *ExamUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *ExamUpdate) SetUpdatedAt(t time.Time) *ExamUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetScore sets the "score" field.
func (eu *ExamUpdate) SetScore(u uint8) *ExamUpdate {
	eu.mutation.ResetScore()
	eu.mutation.SetScore(u)
	return eu
}

// AddScore adds u to the "score" field.
func (eu *ExamUpdate) AddScore(u int8) *ExamUpdate {
	eu.mutation.AddScore(u)
	return eu
}

// SetCoursesID sets the "courses" edge to the Course entity by ID.
func (eu *ExamUpdate) SetCoursesID(id uint64) *ExamUpdate {
	eu.mutation.SetCoursesID(id)
	return eu
}

// SetNillableCoursesID sets the "courses" edge to the Course entity by ID if the given value is not nil.
func (eu *ExamUpdate) SetNillableCoursesID(id *uint64) *ExamUpdate {
	if id != nil {
		eu = eu.SetCoursesID(*id)
	}
	return eu
}

// SetCourses sets the "courses" edge to the Course entity.
func (eu *ExamUpdate) SetCourses(c *Course) *ExamUpdate {
	return eu.SetCoursesID(c.ID)
}

// SetStudentsID sets the "students" edge to the Student entity by ID.
func (eu *ExamUpdate) SetStudentsID(id uint64) *ExamUpdate {
	eu.mutation.SetStudentsID(id)
	return eu
}

// SetNillableStudentsID sets the "students" edge to the Student entity by ID if the given value is not nil.
func (eu *ExamUpdate) SetNillableStudentsID(id *uint64) *ExamUpdate {
	if id != nil {
		eu = eu.SetStudentsID(*id)
	}
	return eu
}

// SetStudents sets the "students" edge to the Student entity.
func (eu *ExamUpdate) SetStudents(s *Student) *ExamUpdate {
	return eu.SetStudentsID(s.ID)
}

// Mutation returns the ExamMutation object of the builder.
func (eu *ExamUpdate) Mutation() *ExamMutation {
	return eu.mutation
}

// ClearCourses clears the "courses" edge to the Course entity.
func (eu *ExamUpdate) ClearCourses() *ExamUpdate {
	eu.mutation.ClearCourses()
	return eu
}

// ClearStudents clears the "students" edge to the Student entity.
func (eu *ExamUpdate) ClearStudents() *ExamUpdate {
	eu.mutation.ClearStudents()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExamUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExamUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExamUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExamUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *ExamUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := exam.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

func (eu *ExamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam.Table, exam.Columns, sqlgraph.NewFieldSpec(exam.FieldID, field.TypeUint64))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(exam.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.Score(); ok {
		_spec.SetField(exam.FieldScore, field.TypeUint8, value)
	}
	if value, ok := eu.mutation.AddedScore(); ok {
		_spec.AddField(exam.FieldScore, field.TypeUint8, value)
	}
	if eu.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exam.CoursesTable,
			Columns: []string{exam.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exam.CoursesTable,
			Columns: []string{exam.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam.StudentsTable,
			Columns: []string{exam.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam.StudentsTable,
			Columns: []string{exam.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExamUpdateOne is the builder for updating a single Exam entity.
type ExamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *ExamUpdateOne) SetUpdatedAt(t time.Time) *ExamUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetScore sets the "score" field.
func (euo *ExamUpdateOne) SetScore(u uint8) *ExamUpdateOne {
	euo.mutation.ResetScore()
	euo.mutation.SetScore(u)
	return euo
}

// AddScore adds u to the "score" field.
func (euo *ExamUpdateOne) AddScore(u int8) *ExamUpdateOne {
	euo.mutation.AddScore(u)
	return euo
}

// SetCoursesID sets the "courses" edge to the Course entity by ID.
func (euo *ExamUpdateOne) SetCoursesID(id uint64) *ExamUpdateOne {
	euo.mutation.SetCoursesID(id)
	return euo
}

// SetNillableCoursesID sets the "courses" edge to the Course entity by ID if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableCoursesID(id *uint64) *ExamUpdateOne {
	if id != nil {
		euo = euo.SetCoursesID(*id)
	}
	return euo
}

// SetCourses sets the "courses" edge to the Course entity.
func (euo *ExamUpdateOne) SetCourses(c *Course) *ExamUpdateOne {
	return euo.SetCoursesID(c.ID)
}

// SetStudentsID sets the "students" edge to the Student entity by ID.
func (euo *ExamUpdateOne) SetStudentsID(id uint64) *ExamUpdateOne {
	euo.mutation.SetStudentsID(id)
	return euo
}

// SetNillableStudentsID sets the "students" edge to the Student entity by ID if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableStudentsID(id *uint64) *ExamUpdateOne {
	if id != nil {
		euo = euo.SetStudentsID(*id)
	}
	return euo
}

// SetStudents sets the "students" edge to the Student entity.
func (euo *ExamUpdateOne) SetStudents(s *Student) *ExamUpdateOne {
	return euo.SetStudentsID(s.ID)
}

// Mutation returns the ExamMutation object of the builder.
func (euo *ExamUpdateOne) Mutation() *ExamMutation {
	return euo.mutation
}

// ClearCourses clears the "courses" edge to the Course entity.
func (euo *ExamUpdateOne) ClearCourses() *ExamUpdateOne {
	euo.mutation.ClearCourses()
	return euo
}

// ClearStudents clears the "students" edge to the Student entity.
func (euo *ExamUpdateOne) ClearStudents() *ExamUpdateOne {
	euo.mutation.ClearStudents()
	return euo
}

// Where appends a list predicates to the ExamUpdate builder.
func (euo *ExamUpdateOne) Where(ps ...predicate.Exam) *ExamUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExamUpdateOne) Select(field string, fields ...string) *ExamUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Exam entity.
func (euo *ExamUpdateOne) Save(ctx context.Context) (*Exam, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExamUpdateOne) SaveX(ctx context.Context) *Exam {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExamUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExamUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *ExamUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := exam.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

func (euo *ExamUpdateOne) sqlSave(ctx context.Context) (_node *Exam, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam.Table, exam.Columns, sqlgraph.NewFieldSpec(exam.FieldID, field.TypeUint64))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exam.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exam.FieldID)
		for _, f := range fields {
			if !exam.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exam.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(exam.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.Score(); ok {
		_spec.SetField(exam.FieldScore, field.TypeUint8, value)
	}
	if value, ok := euo.mutation.AddedScore(); ok {
		_spec.AddField(exam.FieldScore, field.TypeUint8, value)
	}
	if euo.mutation.CoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exam.CoursesTable,
			Columns: []string{exam.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exam.CoursesTable,
			Columns: []string{exam.CoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam.StudentsTable,
			Columns: []string{exam.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam.StudentsTable,
			Columns: []string{exam.StudentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Exam{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
